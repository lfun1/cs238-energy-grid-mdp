Experiments:
alpha_r_list = [30.0]
beta_r_list = [4.0]
budget_list = [20, 50, 100]

num_steps = 100

solver_budget = MCTSSolver(n_iterations=200, depth=20, exploration_constant=10.0)


Dict{Any, Any}((30.0, 4.0, 20) => Dict{Symbol, Any}(:max_degree => 1, :total_cost => 35, :discounted_reward => 258.11165049979803, :total_steps => 18, :final_graph => SimpleGraph{Int64}(1, [[2], [1]]), :total_reward => 2919.0, :reliability => 1), (30.0, 4.0, 100) => Dict{Symbol, Any}(:max_degree => 2, :total_cost => 102, :discounted_reward => 1220.172413387277, :total_steps => 89, :final_graph => SimpleGraph{Int64}(3, [[2, 3], [1, 3], [1, 2]]), :total_reward => 11018.0, :reliability => 2), (30.0, 4.0, 50) => Dict{Symbol, Any}(:max_degree => 2, :total_cost => 65, :discounted_reward => 622.9617066796909, :total_steps => 28, :final_graph => SimpleGraph{Int64}(3, [[2, 3], [1, 3], [1, 2]]), :total_reward => 6642.0, :reliability => 2))


Experiments (depth = 40, budget = 50)
Experiments:
Dict{Any, Any}((30.0, 4.0, 50) => Dict{Symbol, Any}(:max_degree => 2, :total_cost => 65, :discounted_reward => 756.0540647308629, :total_steps => 41, :final_graph => SimpleGraph{Int64}(3, [[2, 3], [1, 3], [1, 2]]), :total_reward => 7270.0, :reliability => 2))